<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何使用Hexo搭建个人博客？</title>
    <url>/2024/07/07/build-Blog/</url>
    <content><![CDATA[<p>使用 Hexo 搭建个人博客是一个简单而有趣的过程，接下来我将带你使用Hexo搭建个人博客。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol>
<li><p><strong>安装 Node.js 和 npm</strong>：</p>
<p>Hexo 依赖于 Node.js 和 npm，首先需要确保你已经安装了它们。如果没有，可以在 <a class="link"   href="https://nodejs.org/" >Node.js 官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 下载并安装。</p>
<p>安装完成之后可以使用<code>node -v</code>和<code>npm -v</code>指令查看是否安装成功！</p>
</li>
<li><p><strong>安装 Hexo</strong>： </p>
<p>使用 npm 安装 Hexo：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>

<p>或者</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g hexo-cli</span><br></pre></td></tr></table></figure></div>

<p>安装完成之后可以使用<code>hexo -v</code>指令查看是否安装成功！</p>
</li>
</ol>
<h2 id="初始化-Hexo"><a href="#初始化-Hexo" class="headerlink" title="初始化 Hexo"></a>初始化 Hexo</h2><ol>
<li><p>创建一个新的Hexo文件夹：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init my-blog</span><br></pre></td></tr></table></figure></div>

<p>注意要将 <code>my-blog</code> 替换为你想要的博客文件夹名称。</p>
<p>完成后，进入该文件夹：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-blog</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>安装依赖：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></div>

<p>或者</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h2><ol>
<li><p>**配置文件 <code>_config.yml</code>**： </p>
<p>打开文件 <code>my-blog/_config.yml</code>，你可以在这里配置站点的一些基本信息，如标题、描述、语言等。例如：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是博客的标题</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">My</span> <span class="string">Blog</span></span><br><span class="line"><span class="comment"># 副标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 博客描述</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;这是我的个人博客&#x27;</span></span><br><span class="line"><span class="comment"># 网站的关键词，支持多个关键词。</span></span><br><span class="line"><span class="attr">keywords:</span> </span><br><span class="line"><span class="comment"># 作者名称</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Your</span> <span class="string">Name</span></span><br><span class="line"><span class="comment"># 语言设置</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="comment"># 时区设置</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><ol>
<li><p>新建文章：</p>
<p>使用以下命令创建一篇新的文章：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;My First Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>这将在<code>source/_posts/</code>目录下创建一个名为<code>My-First-Post.md</code>的文件，其实就是Markdown。</p>
</li>
</ol>
<h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><ol>
<li><p>启动本地服务器： </p>
<p>在博客文件夹中运行以下命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></div>

<p>或者</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>

<p>然后在浏览器中访问 <a href="http://localhost:4000，你将看到你的博客页面。">http://localhost:4000，你将看到你的博客页面。</a></p>
</li>
</ol>
<p>当然这些步骤只能做到本地发布，那如何发布到公网上，供大家访问呢？不要急，我会在下一篇文章详细介绍！！！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>搭建</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么破解Typora？</title>
    <url>/2024/07/08/crack-Typora/</url>
    <content><![CDATA[<p>想白嫖不想付费怎么办？Later这就教你！！！</p>
<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p>首先下载 <code>Typora</code> 的<a class="link"   href="https://so.csdn.net/so/search?q=%E5%AE%89%E8%A3%85%E5%8C%85&spm=1001.2101.3001.7020" >安装包 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：<a class="link"   href="https://typora.io/" >官网(国内可能打不开) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>、<a class="link"   href="https://typoraio.cn/" >中文站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>选择你需要的版本下载，我下载了目前最新版 1.9.5</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240708185201348.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240708185312398.png"
                     
                ></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我安装时忘截图了，简要说一下步骤吧</p>
<ul>
<li>双击安装包</li>
<li>选安装路径（想改就改，暂时先记着）</li>
<li>勾选 <code>Create a desktop shortcut</code></li>
<li>点击 Install 安装</li>
<li>去除勾选 <code>Launch Typora</code> ，点击 Finish</li>
</ul>
<h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><ol>
<li><h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">阿里云盘</span><br><span class="line">https://www.alipan.com/s/N11xrSAWS58</span><br><span class="line">提取码: d73y</span><br><span class="line"></span><br><span class="line">蓝奏云</span><br><span class="line">https://wwm.lanzout.com/iWFTq1xvzalc</span><br><span class="line">密码:8899</span><br></pre></td></tr></table></figure></div>
</li>
<li><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>解压 <code>NodeInject-windows.zip</code> ，得到下面四个文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240708185746715.png"
                     
                ></p>
</li>
<li><p>复制</p>
<p>复制两个 <code>.exe</code> 文件到 <code>typora</code> 的安装目录</p>
</li>
<li><p>执行</p>
<p>在 <code>Typora</code> 的安装目录里打开终端，依次输入</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">.\node_inject.exe</span><br><span class="line">.\license-gen.exe</span><br></pre></td></tr></table></figure></div>

<p>将终端显示的 <code>License for you</code> 后面的序列号复制下来</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">License <span class="keyword">for</span> you: LFJWQZ-QG5GR4-Y9HNSW-FUCC77</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>激活</p>
<p>打开 <code>Typora</code> 软件，点击输入序列号，输入一个邮箱，复制生成的序列号进行激活</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240708190036104.png"
                     
                ></p>
<p>激活成功！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>破解</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>发错了，怎么删除博客文章？？？</title>
    <url>/2024/07/07/delete-Article/</url>
    <content><![CDATA[<h1 id="删除文章？"><a href="#删除文章？" class="headerlink" title="删除文章？"></a>删除文章？</h1><p>不小心发错，或者写错了怎么办？不用着急Later教你解决这个问题！！！</p>
<h2 id="首先进入Hexo项目目录"><a href="#首先进入Hexo项目目录" class="headerlink" title="首先进入Hexo项目目录:"></a>首先进入Hexo项目目录:</h2><p>打开命令行，进入你的Hexo项目目录。</p>
<h2 id="之后找到要删除的文章："><a href="#之后找到要删除的文章：" class="headerlink" title="之后找到要删除的文章："></a>之后找到要删除的文章：</h2><p>Hexo默认会将文章存储在source&#x2F;_posts目录下（如果你没有修改默认配置的话）。</p>
<h2 id="在删除文章："><a href="#在删除文章：" class="headerlink" title="在删除文章："></a>在删除文章：</h2><p>找到要删除的文章文件（通常是以.md为后缀的文件）</p>
<h1 id="之后需要清理生成的静态文件"><a href="#之后需要清理生成的静态文件" class="headerlink" title="之后需要清理生成的静态文件"></a>之后需要清理生成的静态文件</h1><p>删除文章后，需要清理并重新生成静态文件，以确保更新后的博客内容反映在生成的静态网页中。</p>
<h2 id="清理生成的静态文件："><a href="#清理生成的静态文件：" class="headerlink" title="清理生成的静态文件："></a>清理生成的静态文件：</h2><p>在Hexo项目目录中执行以下命令来清理生成的静态文件：<br><code>hexo clean</code>或者<code>hexo c</code></p>
<h2 id="重新生成静态文件："><a href="#重新生成静态文件：" class="headerlink" title="重新生成静态文件："></a>重新生成静态文件：</h2><p>清理完成后，重新生成静态文件：<br><code>hexo generate</code>或者<code>hexo g</code></p>
<h2 id="部署更新"><a href="#部署更新" class="headerlink" title="部署更新"></a>部署更新</h2><p>如果你使用了Hexo自动部署插件（如hexo-deployer-git），则可以直接执行部署命令来将更新后的静态文件部署到远程服务器或者版本控制仓库。<br><code>hexo deploy</code>或者<code>hexo d</code></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>删除</tag>
      </tags>
  </entry>
  <entry>
    <title>这是一篇加密文章，需要获取内容请联系作者获取密码</title>
    <url>/2024/07/09/encryption/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这是一个错误的密码！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c88e23d0646628dc8d460b24fe859f79c6416bdc161e8e8209c659b70c3e16eb">5e908a6c31a79bec4b8c2d36b47cd41bbf8d9ea4eed52790601ba221b148342ba2d62018747672bcf3d9c1c463b09762c7211486553b7893adf64330a8075123e7c0650160e49cfc7204b70829671969d1ff2078c5296b4f8ec3c2f6191ca0f451f884c665f1a93f6ed16aa443751110ab72cb6c6bd2acc38d6318171745fdd8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这篇文章被加密了，请联系作者获取密码！！！</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么把腾讯云的对象存储弄成图床？</title>
    <url>/2024/07/08/image-Hosting/</url>
    <content><![CDATA[<p>由于在书写个人博客的时候需要上传一些图片，视频，音频文件，然后编辑时候一般使用的都是markdown格式，然后图片的存储有时候就很麻烦，故需要一个图床来满足这个需求。</p>
<ol>
<li><h2 id="环境的准备"><a href="#环境的准备" class="headerlink" title="环境的准备"></a>环境的准备</h2><ul>
<li>PicGo:一个一个用于快速上传图片并获取图片 URL 链接的工具，支持目前市面上绝大部分的云服务厂商，例如：腾讯云COS，华为云COS等。 </li>
<li>PicGo官网链接:<a class="link"   href="https://link.zhihu.com/?target=https://picgo.github.io/PicGo-Doc/" >https://link.zhihu.com/?target=https%3A//picgo.github.io/PicGo-Doc/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Typora:专门写markdown的，但是要收费，不过可以破解，详细破解教程可以看我的另一篇文章《如何破解Typora》</li>
<li>腾讯云对象存储COS：先使用新用户的免费额度使用半年(180天)，用于存储图片并提供在线访问。</li>
</ul>
</li>
<li><h2 id="PicGo的安装"><a href="#PicGo的安装" class="headerlink" title="PicGo的安装"></a>PicGo的安装</h2><p>安装包链接:<a class="link"   href="https://link.zhihu.com/?target=https://github.com/Molunerfinn/PicGo/releases" >https://link.zhihu.com/?target=https%3A//github.com/Molunerfinn/PicGo/releases <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>找到对应自己操作系统的版本，这里演示的是windows版本</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/a119553fb3c8bd874ceb2ee0c4af163.png"
                      alt="下载链接"
                ></p>
<p>如果还有其他问题，可以参考官方问题总结：</p>
<p>官方问题总结:<a class="link"   href="https://link.zhihu.com/?target=https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md" >https://link.zhihu.com/?target=https%3A//github.com/Molunerfinn/PicGo/blob/dev/FAQ.md <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="安装完成之后怎么启动？"><a href="#安装完成之后怎么启动？" class="headerlink" title="安装完成之后怎么启动？"></a>安装完成之后怎么启动？</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240708180755740.png"
                      alt="安装完成之后怎么启动？"
                ></p>
<p>安装完成之后就可以去配置存储桶了。</p>
</li>
<li><h2 id="注册和创建桶"><a href="#注册和创建桶" class="headerlink" title="注册和创建桶"></a>注册和创建桶</h2><p>登录腾讯云官网，进入对象存储（COS）管理控制台。</p>
<p>创建一个新的存储桶（Bucket），并选择适合你需求的存储类型和区域。</p>
<ol>
<li><h3 id="入口：总览-控制台-腾讯云-tencent-com"><a href="#入口：总览-控制台-腾讯云-tencent-com" class="headerlink" title="入口：总览 - 控制台 - 腾讯云 (tencent.com)"></a>入口：<a class="link"   href="https://console.cloud.tencent.com/" >总览 - 控制台 - 腾讯云 (tencent.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240708181354185.png"
                      alt="进入控制台选择对象存储"
                ></p>
</li>
<li><h3 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/309ab8be84fafbfd4fcd575995e3db5.png"
                      alt="第一步"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/2ac808cb17ab9faee99a4439c7c9dc4.png"
                      alt="第二步"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/b0d7816c84783febfa88586f9ae4265.png"
                      alt="第三步"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/2363a5e8b835af9d7bfe8860ca9b860.png"
                      alt="第四步"
                ></p>
</li>
<li><h3 id="记录存储桶配置"><a href="#记录存储桶配置" class="headerlink" title="记录存储桶配置"></a>记录存储桶配置</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/1ee186a0b91256f32dc0edea1870fce.png"
                      alt="第一步"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/a216527d8b59b37f30b30cbcfbbc72c.png"
                      alt="第二部"
                ></p>
</li>
<li><h3 id="获取密钥对"><a href="#获取密钥对" class="headerlink" title="获取密钥对"></a>获取密钥对</h3><p>入口：<a class="link"   href="https://console.cloud.tencent.com/cam/capi" >https://console.cloud.tencent.com/cam/capi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/3b606729b1cd738fb0d5f277507ab74.png"
                      alt="获取密钥对"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/28e8c19f9532327c44b4c5547cc0ec2.png"
                      alt="提示"
                ></p>
</li>
<li><h3 id="记录需要的5个信息（上面几步已经全部获取到）："><a href="#记录需要的5个信息（上面几步已经全部获取到）：" class="headerlink" title="记录需要的5个信息（上面几步已经全部获取到）："></a>记录需要的5个信息（上面几步已经全部获取到）：</h3><ul>
<li>SecretId</li>
<li>SecretKey</li>
<li>存储桶名称Bucket</li>
<li>AppId</li>
<li>所属地域</li>
</ul>
</li>
</ol>
</li>
<li><h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><ol>
<li><h3 id="打开我们前面安装的PicGo"><a href="#打开我们前面安装的PicGo" class="headerlink" title="打开我们前面安装的PicGo"></a>打开我们前面安装的PicGo</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/02903be48717845539a8b4d6ef3d728.png"
                     
                ></p>
</li>
<li><h3 id="图床设置→腾讯云COS"><a href="#图床设置→腾讯云COS" class="headerlink" title="图床设置→腾讯云COS"></a>图床设置→腾讯云COS</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/c6db257959251fc1d26d531ee7e8ca8.png"
                     
                ></p>
</li>
<li><p>和我一样的配置就好了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/cf29d2520e1a97d732cda9023c59e33.png"
                     
                ></p>
</li>
<li><h3 id="设置为默认图床"><a href="#设置为默认图床" class="headerlink" title="设置为默认图床"></a>设置为默认图床</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/65b8ba66ef57f18f8423d006e246d45.png"
                     
                ></p>
</li>
<li><p>测试上传</p>
<p>将图片拖入</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240708183832668.png"
                     
                ></p>
<p>提示成功</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/53cee49cd4492db278e9e9b43ac0816.png"
                     
                ></p>
<p>查看结果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/be566ca113f81faca85978ee711ac5e.png"
                     
                ></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/82df7ca31d9ef6b6dbe9628aab5dd0c.png"
                      style="zoom:25%;" 
                ></li>
</ol>
</li>
<li><h2 id="配置Typora"><a href="#配置Typora" class="headerlink" title="配置Typora"></a>配置Typora</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/ffb8ee5a0c2514455d801e08820c3cf.png"
                     
                ></p>
<p>验证一下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/817d82b0090dafee29a6e68fadeb21c.png"
                     
                ></p>
</li>
</ol>
<p>这样我们就完成图床的搭建了，可以做到插入图片就立即调用picgo上传到你的存储桶，加上Typora所见即所得的优越书写体验，只能说非常的好用！！！</p>
]]></content>
      <tags>
        <tag>云存储</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>如何发布博客？</title>
    <url>/2024/07/07/release-Blog/</url>
    <content><![CDATA[<p>接上一篇用Hexo搭建博客的文章，本文将介绍如何将Hexo博客部署到 GitHub 上，如果你有个人的服务器的话，可以移步我的另一篇文章《如何把Hexo博客部署到服务器上》。</p>
<h2 id="步骤一：创建-GitHub-仓库"><a href="#步骤一：创建-GitHub-仓库" class="headerlink" title="步骤一：创建 GitHub 仓库"></a>步骤一：创建 GitHub 仓库</h2><p>在 GitHub 上创建一个新的仓库，命名是固定的，比如 <code>username.github.io</code>，其中 <code>username</code> 是你的 GitHub 用户名。</p>
<h2 id="步骤二：安装-Git-和-Hexo-deployer-git-插件"><a href="#步骤二：安装-Git-和-Hexo-deployer-git-插件" class="headerlink" title="步骤二：安装 Git 和 Hexo-deployer-git 插件"></a>步骤二：安装 Git 和 Hexo-deployer-git 插件</h2><ol>
<li><p><strong>安装 Git</strong>：确保你的计算机上安装了 Git，并且配置了 GitHub 的 SSH 公钥，这样你可以与 GitHub 仓库进行安全的通信。</p>
</li>
<li><p><strong>安装 Hexo-deployer-git 插件</strong>：在命令行中进入你的 Hexo 博客目录，运行以下命令安装插件：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="步骤三：配置-Hexo-部署设置"><a href="#步骤三：配置-Hexo-部署设置" class="headerlink" title="步骤三：配置 Hexo 部署设置"></a>步骤三：配置 Hexo 部署设置</h2><p><strong>配置 <code>_config.yml</code> 文件</strong>：打开 Hexo 博客根目录下的 <code>_config.yml</code> 文件，在文件末尾添加或修改以下部分：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com:username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span>  <span class="comment"># 分支可以根据需要调整，通常为 master</span></span><br></pre></td></tr></table></figure></div>

<h2 id="步骤四：生成并部署博客"><a href="#步骤四：生成并部署博客" class="headerlink" title="步骤四：生成并部署博客"></a>步骤四：生成并部署博客</h2><ol>
<li><p><strong>生成静态文件</strong>：运行以下命令生成静态文件：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></div>

<p>或者</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>部署到 GitHub</strong>：运行以下命令将生成的静态文件部署到 GitHub 上：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>或者</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<p>如果你发现你部署上去的博客和你在开发环境中看见的博客不一样，可以尝试把public文件夹删了，之后在执行<code>hexo g</code>或者<code>hexo generate</code>命名重新生成静态文件。</p>
<p>然后<code>hexo c</code>这个指令可写可不写，就是用于清除缓存的。<br>开发环境一般是<code>hexo c</code>+<code>hexo g</code>+<code>hexo s</code>，部署的时候一般是<code>hexo c</code>+<code>hexo g</code>+<code>hexo d</code>，不过这个<code>hexo c</code>可写可不写。</p>
</li>
</ol>
<h2 id="步骤五：访问你的博客"><a href="#步骤五：访问你的博客" class="headerlink" title="步骤五：访问你的博客"></a>步骤五：访问你的博客</h2><p><strong>访问博客</strong>：打开浏览器，访问 <code>https://username.github.io</code>，其中 <code>username</code> 是你的 GitHub 用户名。你的 Hexo 博客现在应该已经成功部署到 GitHub Pages 上了。</p>
<p>通过这些步骤，你就可以将 Hexo 博客成功地部署到 GitHub 上，并且可以通过 GitHub Pages 免费托管和访问你的博客内容。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>发布</tag>
      </tags>
  </entry>
  <entry>
    <title>默认主题太丑？怎么切换主题？</title>
    <url>/2024/07/09/switch-Themes/</url>
    <content><![CDATA[<h2 id="第一步进入Hexo官网"><a href="#第一步进入Hexo官网" class="headerlink" title="第一步进入Hexo官网"></a>第一步进入Hexo官网</h2><p>地址：<a class="link"   href="https://hexo.io/zh-cn/" >https://hexo.io/zh-cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>进入官网之后点击主题，然后找到你喜欢的主题。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240709162846238.png"
                     
                ></p>
<h2 id="第二步找主题"><a href="#第二步找主题" class="headerlink" title="第二步找主题"></a>第二步找主题</h2><p>这边做演示， 就随便找了一个，步骤是一样的。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240709163304262.png"
                     
                ></p>
<h2 id="第三步安装"><a href="#第三步安装" class="headerlink" title="第三步安装"></a>第三步安装</h2><p>进去之后，根据主题作者的说明进行安装，一般来说，不是npm就是git  clone，个人推荐用npm！！！</p>
<p>之后在修改配置文件，打开Hexo站点根目录下的<code>_config.yml</code>文件，找到<code>theme</code>这一行，将其值改为你刚刚下载的主题名称。例如：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br></pre></td></tr></table></figure></div>

<p>某些主题可能有额外的依赖项，需要安装这些依赖项。请查阅主题的README或文档，确保安装所有必要的依赖项。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure></div>

<h2 id="第四步配置主题"><a href="#第四步配置主题" class="headerlink" title="第四步配置主题"></a>第四步配置主题</h2><p>大多数主题都有自己的配置文件，git  clone下来的通常位于<code>themes/your-theme/_config.yml</code>中，如果是用npm下载下来的通常是位于node_modules文件夹里面。根据主题文档，对这个配置文件进行相应的设置。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240709165317928.png"
                     
                ></p>
<h2 id="第五步私有配置"><a href="#第五步私有配置" class="headerlink" title="第五步私有配置"></a>第五步私有配置</h2><p>为了防止因为更新导致之前的配置丢失，我们可以在Hexo的根目录弄一个私有的配置文件，比如<code>_config.your-theme.yml</code>，然后把主题的<code>_config.yml</code>里面的内容复制到自己的私有配置文件里面去。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240709165159812.png"
                     
                ></p>
<h2 id="配置完之后怎么看到效果"><a href="#配置完之后怎么看到效果" class="headerlink" title="配置完之后怎么看到效果???"></a>配置完之后怎么看到效果???</h2><p>Hexo三件套（清除缓存、打包、本地部署）：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></div>

<p>完成以上步骤后，你的Hexo博客应该已经切换到了新的主题。如果你在任何一步遇到问题，可以参考主题的官方文档或者Hexo的官方文档，或者联系博主我。</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>主题</category>
      </categories>
      <tags>
        <tag>搭建</tag>
        <tag>Hexo</tag>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>买了服务器怎么用？？？</title>
    <url>/2024/07/11/%E4%B9%B0%E4%BA%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F%EF%BC%9F%EF%BC%9F/</url>
    <content><![CDATA[<p>买了服务器不知道怎么用怎么办？later这就教你！</p>
<p>本教程以腾讯云为例。</p>
<h2 id="买了服务器在哪里查看？"><a href="#买了服务器在哪里查看？" class="headerlink" title="买了服务器在哪里查看？"></a>买了服务器在哪里查看？</h2><ol>
<li><p>首页，点击控制台</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711204029213.png"
                      alt="image-20240711204029213"
                ></p>
</li>
<li><p>选择服务器</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711204521270.png"
                      alt="image-20240711204521270"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711204754683.png"
                      alt="image-20240711204754683"
                ></p>
</li>
</ol>
<h2 id="如何修改密码？？？"><a href="#如何修改密码？？？" class="headerlink" title="如何修改密码？？？"></a>如何修改密码？？？</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711205240883.png"
                      alt="image-20240711205240883"
                ></p>
<p>这个密码一定要记好！</p>
<h2 id="一开始系统选错了，怎么换？？？"><a href="#一开始系统选错了，怎么换？？？" class="headerlink" title="一开始系统选错了，怎么换？？？"></a>一开始系统选错了，怎么换？？？</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711205547572.png"
                      alt="image-20240711205547572"
                ></p>
<h2 id="怎么进入系统？？？"><a href="#怎么进入系统？？？" class="headerlink" title="怎么进入系统？？？"></a>怎么进入系统？？？</h2><p>进行系统有很多种方法，比如远程桌面，通过工具连接，直接用腾讯云的远程登陆等等</p>
<h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711211201691.png"
                      alt="image-20240711211201691"
                ></p>
<p>点击这个进去之后输入ip地址，输入密码，就可以访问服务器了。</p>
<h3 id="通过工具连接"><a href="#通过工具连接" class="headerlink" title="通过工具连接"></a>通过工具连接</h3><p>这边推荐一个工具：Xshell</p>
<p>下载地址：<a class="link"   href="https://www.xshell.com/zh/free-for-home-school/" >https://www.xshell.com/zh/free-for-home-school/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711210552701.png"
                      alt="image-20240711210552701"
                ></p>
<p>下载完成之后安装，之后打开会提示需要激活还是什么的，由于我已经安装过了，就说一下过程吧，就是你输入用户名，邮箱，然后会发一个邮箱给你，然后你点击邮箱里面的链接就可以使用了。</p>
<h4 id="连接步骤"><a href="#连接步骤" class="headerlink" title="连接步骤"></a>连接步骤</h4><ol>
<li><p>先新建连接</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711211348329.png"
                      alt="image-20240711211348329"
                ></p>
</li>
<li><p>根据图片操作，其他默认</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711211646529.png"
                      alt="image-20240711211646529"
                ></p>
</li>
<li><p>输入账号，密码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711211829082.png"
                      alt="image-20240711211829082"
                ></p>
</li>
<li><p>把这个关掉</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711211917401.png"
                      alt="image-20240711211917401"
                ></p>
</li>
<li><p>选择这个</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711211947531.png"
                      alt="image-20240711211947531"
                ></p>
</li>
<li><p>全部配置完之后，右键选择打开，就可以使用了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711212117500.png"
                      alt="image-20240711212117500"
                ></p>
</li>
<li><p>点击一次性接受或者接受并保存</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711220723977.png"
                      alt="image-20240711220723977"
                ></p>
<h2 id="腾讯云的远程登陆"><a href="#腾讯云的远程登陆" class="headerlink" title="腾讯云的远程登陆"></a>腾讯云的远程登陆</h2><ol>
<li><p>点击登陆</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711212313296.png"
                      alt="image-20240711212313296"
                ></p>
</li>
<li><p>输入账号密码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711212405074.png"
                      alt="image-20240711212405074"
                ></p>
</li>
</ol>
<h2 id="防火墙的配置"><a href="#防火墙的配置" class="headerlink" title="防火墙的配置"></a>防火墙的配置</h2><p>一般都是这么配置的，有其他需要可以添加规则进行修改</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711212518122.png"
                      alt="image-20240711212518122"
                ></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>如何把Hexo博客部署到服务器上</title>
    <url>/2024/07/11/%E5%A6%82%E4%BD%95%E6%8A%8AHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
    <content><![CDATA[<h2 id="连接上服务器（Linux系统）"><a href="#连接上服务器（Linux系统）" class="headerlink" title="连接上服务器（Linux系统）"></a>连接上服务器（Linux系统）</h2><p>用什么方法连接服务器都可以，只要连接上就可以。</p>
<h2 id="安装需要的依赖："><a href="#安装需要的依赖：" class="headerlink" title="安装需要的依赖："></a>安装需要的依赖：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br></pre></td></tr></table></figure></div>

<h2 id="安装编译工具："><a href="#安装编译工具：" class="headerlink" title="安装编译工具："></a>安装编译工具：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y gcc perl-ExtUtils-MakeMaker package</span><br></pre></td></tr></table></figure></div>

<h2 id="检查Git是否安装："><a href="#检查Git是否安装：" class="headerlink" title="检查Git是否安装："></a>检查Git是否安装：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></div>

<h2 id="安装Git：已经安装过的可以跳过这一步"><a href="#安装Git：已经安装过的可以跳过这一步" class="headerlink" title="安装Git：已经安装过的可以跳过这一步"></a>安装Git：已经安装过的可以跳过这一步</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum install git -y</span><br></pre></td></tr></table></figure></div>

<h2 id="添加用户并设置密码："><a href="#添加用户并设置密码：" class="headerlink" title="添加用户并设置密码："></a>添加用户并设置密码：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">useradd git </span><br><span class="line">passwd git</span><br></pre></td></tr></table></figure></div>

<h2 id="创建博客目录："><a href="#创建博客目录：" class="headerlink" title="创建博客目录："></a>创建博客目录：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/blog</span><br></pre></td></tr></table></figure></div>

<h2 id="给博客目录增加相应读写权限："><a href="#给博客目录增加相应读写权限：" class="headerlink" title="给博客目录增加相应读写权限："></a>给博客目录增加相应读写权限：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">chmod -R a+rw /home/blog</span><br></pre></td></tr></table></figure></div>

<h2 id="建立Git仓库："><a href="#建立Git仓库：" class="headerlink" title="建立Git仓库："></a>建立Git仓库：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/git </span><br><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure></div>

<h2 id="给Git目录增加相应读写权限："><a href="#给Git目录增加相应读写权限：" class="headerlink" title="给Git目录增加相应读写权限："></a>给Git目录增加相应读写权限：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">chmod -R a+rw /home/git</span><br></pre></td></tr></table></figure></div>

<h2 id="新建钩子文件："><a href="#新建钩子文件：" class="headerlink" title="新建钩子文件："></a>新建钩子文件：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vim /home/git/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure></div>

<h2 id="在文件中添加："><a href="#在文件中添加：" class="headerlink" title="在文件中添加："></a>在文件中添加：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git --work-tree=/home/blog --git-dir=/home/git/blog.git checkout -f </span><br></pre></td></tr></table></figure></div>

<h2 id="给钩子文件增加可执行权限："><a href="#给钩子文件增加可执行权限：" class="headerlink" title="给钩子文件增加可执行权限："></a>给钩子文件增加可执行权限：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /home/git/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure></div>

<h2 id="安装Nginx："><a href="#安装Nginx：" class="headerlink" title="安装Nginx："></a>安装Nginx：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure></div>

<h2 id="启动Nginx："><a href="#启动Nginx：" class="headerlink" title="启动Nginx："></a>启动Nginx：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure></div>

<h2 id="查看Nginx配置文件路径："><a href="#查看Nginx配置文件路径：" class="headerlink" title="查看Nginx配置文件路径："></a>查看Nginx配置文件路径：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -t </span><br></pre></td></tr></table></figure></div>

<h2 id="修改Nginx的配置文件："><a href="#修改Nginx的配置文件：" class="headerlink" title="修改Nginx的配置文件："></a>修改Nginx的配置文件：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></div>

<p>注意要用自己主机上的Nginx的配置文件路径！！！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/cd8e29547dd45447562f30f044d8d4b.png"
                      alt="cd8e29547dd45447562f30f044d8d4b"
                ></p>
<p>如果是按我的步骤来的话，没有做任何改动，可以直接复制代码</p>
<h2 id="重启Nginx："><a href="#重启Nginx：" class="headerlink" title="重启Nginx："></a>重启Nginx：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure></div>

<h2 id="在Windows端（就是本地）博客目录下安装部署插件："><a href="#在Windows端（就是本地）博客目录下安装部署插件：" class="headerlink" title="在Windows端（就是本地）博客目录下安装部署插件："></a>在Windows端（就是本地）博客目录下安装部署插件：</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<h2 id="修改Hexo的配置文件（就是-config-yml）："><a href="#修改Hexo的配置文件（就是-config-yml）：" class="headerlink" title="修改Hexo的配置文件（就是_config.yml）："></a>修改Hexo的配置文件（就是_config.yml）：</h2><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy: type:</span> <span class="string">git</span> </span><br><span class="line"><span class="attr">repository:</span> <span class="string">(输用户名，如git)@(输服务器IP地址):/home/git/blog.git</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711220406904.png"
                      alt="image-20240711220406904"
                ></p>
<h2 id="测试-SSH-连接"><a href="#测试-SSH-连接" class="headerlink" title="测试 SSH 连接"></a>测试 SSH 连接</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@（输服务器IP地址）</span><br></pre></td></tr></table></figure></div>

<p>输入这段代码之后，还要输入密码，密码是你自己设置的千万不要忘记，如果你是按照我的步骤弄的，没有修改过代码，那你的密码就是git。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711220037143.png"
                      alt="image-20240711220037143"
                ></p>
<p>之后在键盘按下<code>CTRL+C</code>退出</p>
<h2 id="Hexo-三件套"><a href="#Hexo-三件套" class="headerlink" title="Hexo 三件套"></a>Hexo 三件套</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<p><code>hexo d</code>的时候也会要你输入密码，一样的还是git</p>
<p>通过以上的步骤就可以把博客部署到服务器上了。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么低价买入服务器？？？</title>
    <url>/2024/07/11/%E6%80%8E%E4%B9%88%E4%BD%8E%E4%BB%B7%E4%B9%B0%E5%85%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9F%EF%BC%9F%EF%BC%9F/</url>
    <content><![CDATA[<p>这几天我需要将博客部署到国内，因此我在阿里云和腾讯云的官网找了一些价格较低的服务器。</p>
<h2 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h2><p>链接：<a class="link"   href="https://www.aliyun.com/benefit" >https://www.aliyun.com/benefit <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711190733496.png"
                      alt="image-20240711190733496"
                ></p>
<h2 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h2><p>链接：<a class="link"   href="https://cloud.tencent.com/act/pro/Featured?from=22334" >https://cloud.tencent.com/act/pro/Featured?from=22334 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>腾讯云可以领两个红包，用于抵扣购买的费用，下面会详细介绍：</p>
<h3 id="第一个红包"><a href="#第一个红包" class="headerlink" title="第一个红包"></a>第一个红包</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711191226304.png"
                      alt="image-20240711191226304"
                ></p>
<p>添加微信之后可以拿一个10元的红包，这个红包可以给你的云存储购买流量包使用。</p>
<h3 id="第二个红包（购买服务器的时候可以用）"><a href="#第二个红包（购买服务器的时候可以用）" class="headerlink" title="第二个红包（购买服务器的时候可以用）"></a>第二个红包（购买服务器的时候可以用）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711191521552.png"
                      alt="image-20240711191521552"
                ></p>
<p>第二个红包就是这个了，微信扫描这个码可以拿到一个10元的红包，然后可以通过拉人让红包变大，最大是30，经本人测试，拉一个2块钱。</p>
<h2 id="低价服务器在哪里？？？"><a href="#低价服务器在哪里？？？" class="headerlink" title="低价服务器在哪里？？？"></a>低价服务器在哪里？？？</h2><p>页面下拉</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240711191908144.png"
                      alt="image-20240711191908144"
                ></p>
<p>个人建议：服务器系统最好是选择Linux的，主要因为它的稳定性、安全性高，开源免费，性能优异，以及灵活的定制和强大的社区支持。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>mock.js怎么用？</title>
    <url>/2024/07/24/mock-js%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F/</url>
    <content><![CDATA[<p>mock.js其实就是把ajax发出去的请求给拦截住，之后返回假数据。</p>
<p>要使用mock首先需要用npm下axios和mockjs</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install axios mockjs</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240723233930227.png"
                      alt="image-20240723233930227"
                ></p>
<h2 id="1-建立mock文件夹"><a href="#1-建立mock文件夹" class="headerlink" title="1.建立mock文件夹"></a>1.建立mock文件夹</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240723234402659.png"
                      alt="image-20240723234402659"
                ></p>
<h2 id="2-填入假数据"><a href="#2-填入假数据" class="headerlink" title="2.填入假数据"></a>2.填入假数据</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240723234849417.png"
                      alt="image-20240723234849417"
                ></p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;这是假数据1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;这是假数据2&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></div>

<h2 id="3-建立service-js"><a href="#3-建立service-js" class="headerlink" title="3.建立service.js"></a>3.建立service.js</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240723235040980.png"
                      alt="image-20240723235040980"
                ></p>
<p>建立假接口，返回假数据：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240723235543902.png"
                      alt="image-20240723235543902"
                ></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> msg <span class="keyword">from</span> <span class="string">&#x27;../index/msg/index.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;/mock/getMsg&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">data</span>: msg</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<h2 id="4-在main-js里面导入indexService-js"><a href="#4-在main-js里面导入indexService-js" class="headerlink" title="4.在main.js里面导入indexService.js"></a>4.在main.js里面导入indexService.js</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240723235753662.png"
                      alt="image-20240723235753662"
                ></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/mock/index/indexService&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="5-调用假接口"><a href="#5-调用假接口" class="headerlink" title="5.调用假接口"></a>5.调用假接口</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const msg = reactive(&#123; list: [] &#125;);</span><br><span class="line"></span><br><span class="line">axios.get(&#x27;/mock/getMsg&#x27;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">        msg.list = res.data.data</span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(item, index) in msg.list&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240724000850082.png"
                      alt="image-20240724000850082"
                ></p>
<h2 id="mock怎么接收数据？"><a href="#mock怎么接收数据？" class="headerlink" title="mock怎么接收数据？"></a>mock怎么接收数据？</h2><p>app.vue:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">    </span><br><span class="line">const send = () =&gt; &#123;</span><br><span class="line">    axios.post(&#x27;/mock/poatSend&#x27;,&#123;</span><br><span class="line">        msg:1</span><br><span class="line">    &#125;).then(res =&gt; &#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;send&quot;&gt;发送数据&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<p>indexService.js:</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;/mock/poatSend&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, <span class="function">(<span class="params">options</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; msg &#125; = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(options.<span class="property">body</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">data</span>: <span class="string">&quot;你发送的是：&quot;</span> + msg</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240724002412521.png"
                      alt="image-20240724002412521"
                ></p>
<p>项目下载：<a class="link"   href="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/project/mock.zip" >点我下载dome <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>mock.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-yum镜像源问题</title>
    <url>/2024/07/22/Linux-yum%E9%95%9C%E5%83%8F%E6%BA%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>yum的工作原理是从我们所配置的远程仓库下载rpm包，然后进行安装，远程仓库的配置文件位于<code>/etc/yum.repos.d/</code>目录中。</p>
<p>远程仓库可手动配置，也可在线配置，下面在线配置</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install epel-release </span><br></pre></td></tr></table></figure></div>

<p>但是直接用这个命令的时候可能会碰到我这个问题：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">已加载插件：fastestmirror, langpacks</span><br><span class="line">Determining fastest mirrors</span><br><span class="line">Could not retrieve mirrorlist http://mirrorlist.centos.org/?release=7&amp;<span class="built_in">arch</span>=x86_64&amp;repo=os&amp;infra=stock error was</span><br><span class="line">12: Timeout on http://mirrorlist.centos.org/?release=7&amp;<span class="built_in">arch</span>=x86_64&amp;repo=os&amp;infra=stock: (28, <span class="string">&#x27;Resolving timed out after 30565 milliseconds&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> One of the configured repositories failed (未知),</span><br><span class="line"> and yum doesn<span class="string">&#x27;t have enough cached data to continue. At this point the only</span></span><br></pre></td></tr></table></figure></div>

<p>出现这种错误通常是因为你的服务器无法连接到 CentOS 的镜像服务器，可能是网络问题或 DNS 配置问题。我是通过手动配置镜像源来解决这个问题的，过程如下：</p>
<h2 id="手动设置镜像源"><a href="#手动设置镜像源" class="headerlink" title="手动设置镜像源"></a>手动设置镜像源</h2><h3 id="1-编辑-CentOS-Base-repo-文件："><a href="#1-编辑-CentOS-Base-repo-文件：" class="headerlink" title="1.编辑 CentOS-Base.repo 文件："></a>1.编辑 <code>CentOS-Base.repo</code> 文件：</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure></div>

<h3 id="2-直接删掉里面的全部的东西-按esc，之后一直按D键就可以了-，换成使用阿里云镜像源-按i可以输入-："><a href="#2-直接删掉里面的全部的东西-按esc，之后一直按D键就可以了-，换成使用阿里云镜像源-按i可以输入-：" class="headerlink" title="2.直接删掉里面的全部的东西(按esc，之后一直按D键就可以了)，换成使用阿里云镜像源(按i可以输入)："></a>2.直接删掉里面的全部的东西(按esc，之后一直按D键就可以了)，换成使用阿里云镜像源(按i可以输入)：</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mirrorlist=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;<span class="built_in">arch</span>=<span class="variable">$basearch</span>&amp;repo=os</span></span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-$releasever - Updates</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mirrorlist=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;<span class="built_in">arch</span>=<span class="variable">$basearch</span>&amp;repo=updates</span></span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever - Extras</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mirrorlist=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;<span class="built_in">arch</span>=<span class="variable">$basearch</span>&amp;repo=extras</span></span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure></div>

<h3 id="3-保存并退出文件"><a href="#3-保存并退出文件" class="headerlink" title="3.保存并退出文件"></a>3.保存并退出文件</h3><p>按下esc键之后输入<code>:</code>号在输入wq，按下回车</p>
<h3 id="4-清理缓存并重试安装-epel-release"><a href="#4-清理缓存并重试安装-epel-release" class="headerlink" title="4.清理缓存并重试安装 epel-release"></a>4.清理缓存并重试安装 <code>epel-release</code></h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum clean all</span><br><span class="line"><span class="built_in">sudo</span> yum makecache</span><br><span class="line"><span class="built_in">sudo</span> yum -y install epel-release</span><br></pre></td></tr></table></figure></div>

<p>通过使用国内的镜像源，应该能解决由于网络连接问题导致的超时错误。如果依然出现问题，可以更换你的 <code>/etc/resolv.conf</code> 文件使用公共 DNS 服务器：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/resolv.conf</span><br></pre></td></tr></table></figure></div>

<p>添加以下内容：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">nameserver 223.5.5.5  <span class="comment"># 阿里云公共DNS</span></span><br><span class="line">nameserver 223.6.6.6  <span class="comment"># 阿里云公共DNS</span></span><br></pre></td></tr></table></figure></div>

<p>然后再次清理缓存并重试安装。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3中怎么安装scss？</title>
    <url>/2024/08/15/Vue3%E4%B8%AD%E6%80%8E%E4%B9%88%E5%AE%89%E8%A3%85scss%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="第一步用npm下载sass"><a href="#第一步用npm下载sass" class="headerlink" title="第一步用npm下载sass"></a>第一步用npm下载sass</h2><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">npm install sass --save-dev</span><br></pre></td></tr></table></figure></div>

<h2 id="第二步编辑vite-config-js，实现全局引用"><a href="#第二步编辑vite-config-js，实现全局引用" class="headerlink" title="第二步编辑vite.config.js，实现全局引用"></a>第二步编辑vite.config.js，实现全局引用</h2><p>在resolve中添加如下代码：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">      <span class="attr">scss</span>: &#123;</span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">`@import &quot;@/assets/main.scss&quot;;`</span> <span class="comment">// 注意这个是路径</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240815182347988.png"
                      alt="image-20240815182347988"
                ></p>
<h2 id="第三步测试scss是否生效"><a href="#第三步测试scss是否生效" class="headerlink" title="第三步测试scss是否生效"></a>第三步测试scss是否生效</h2><p>编写main.scss:</p>
<div class="highlight-container" data-rel="Scss"><figure class="iseeu highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$primary-color</span>: <span class="number">#3498db</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编写test.vue:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;我是测试&lt;/p&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">  p&#123;</span><br><span class="line">    color: $primary-color;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<p>在控制台输入<code>npm run dev</code>查看效果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240815183013430.png"
                      alt="image-20240815183013430"
                ></p>
<p>完美显示！</p>
<p>局部引用和这个方法差不多，就不演示了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>前端代理转发</title>
    <url>/2024/08/18/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<p>代理转发就是将请求转发到其他服务器，一般用于解决跨域问题。<br>在学习若依的时候，发现若依的代码中，有配置代理转发，如下：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite 相关配置</span></span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">      <span class="attr">port</span>: <span class="number">81</span>,</span><br><span class="line">      <span class="attr">host</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="comment">// https://cn.vitejs.dev/config/#server-proxy</span></span><br><span class="line">        <span class="string">&#x27;/dev-api&#x27;</span>: &#123;</span><br><span class="line">          <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">          <span class="comment">// target: &#x27;https://api.wzs.pub/mock/13&#x27;,</span></span><br><span class="line">          <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">rewrite</span>: <span class="function">(<span class="params">p</span>) =&gt;</span> p.<span class="title function_">replace</span>(<span class="regexp">/^\/dev-api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>跨域</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis是什么？可以干什么？</title>
    <url>/2024/08/20/Redis%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%8F%AF%E4%BB%A5%E5%B9%B2%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="Redis-是什么？"><a href="#Redis-是什么？" class="headerlink" title="Redis 是什么？"></a>Redis 是什么？</h2><p>Redis 是一款开源的、高性能的键-值存储（key-value store），它常被称作是一款数据结构服务器（data structure server）。Redis 的键值可以包括字符串（strings）类型，同时还包括哈希（hashes）、列表（lists）、集合（sets）和有序集合（sorted sets）等数据类型。对于这些数据类型，你可以执行原子操作。例如：对字符串进行附加操作（append）；递增哈希中的值；向列表中增加元素；计算集合的交集、并集与差集等。</p>
<h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ul>
<li><strong>基于内存运行</strong>：Redis 将所有数据存储在内存中，因此具有非常高的读写性能。</li>
<li><strong>支持网络</strong>：Redis 支持客户端&#x2F;服务器架构，可以通过网络访问。</li>
<li><strong>可选持久化</strong>：尽管主要运行在内存中，Redis 也支持将数据定期写入磁盘，以防止数据丢失。</li>
<li><strong>支持多种数据结构</strong>：除了基本的键值对，还支持更复杂的数据结构。</li>
<li><strong>单线程模型</strong>：Redis 使用单线程模型处理客户端请求，保证了数据的一致性和简单性。</li>
<li><strong>可扩展性</strong>：Redis 支持主从复制、哨兵（sentinel）机制和集群模式，可以实现高可用性和横向扩展。</li>
</ul>
<h3 id="Redis-通常用于以下场景"><a href="#Redis-通常用于以下场景" class="headerlink" title="Redis 通常用于以下场景"></a>Redis 通常用于以下场景</h3><ul>
<li><strong>缓存</strong>：由于其高速读写性能，Redis 经常用作缓存系统。</li>
<li><strong>会话存储</strong>：存储 Web 应用程序的用户会话数据。</li>
<li><strong>消息队列</strong>：利用 Redis 的列表和发布&#x2F;订阅功能实现消息队列。</li>
<li><strong>实时数据分析</strong>：Redis 的实时性和高吞吐量使其成为实时数据分析的理想选择。</li>
<li><strong>计数器和排行榜</strong>：利用 Redis 的原子操作和有序集合实现计数器和排行榜等功能。</li>
</ul>
<h3 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h3><ul>
<li><strong>语言</strong>：Redis 由 ANSI C 编写。</li>
<li><strong>客户端库</strong>：支持多种编程语言的客户端库，可以轻松集成到各种应用程序中。</li>
</ul>
<p>Redis 是一个非常强大的工具，适用于多种应用场景，特别是在需要高性能数据存储和检索的情况下。</p>
]]></content>
      <categories>
        <category>数据</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>minio是什么？可以干什么？</title>
    <url>/2024/08/20/minio%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%8F%AF%E4%BB%A5%E5%B9%B2%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="什么是-MinIO"><a href="#什么是-MinIO" class="headerlink" title="什么是 MinIO"></a>什么是 MinIO</h2><p>MinIO 是一个高性能、分布式对象存储服务器，它兼容 Amazon S3 API。MinIO 旨在为多云环境提供高性能、高可用性和易于使用的对象存储解决方案。MinIO 的设计目标之一是提供线性的可扩展性，这意味着随着硬件资源的增加，MinIO 的性能也会线性增长。</p>
<h2 id="MinIO-的特点"><a href="#MinIO-的特点" class="headerlink" title="MinIO 的特点"></a>MinIO 的特点</h2><ul>
<li><strong>高性能</strong>：MinIO 能够提供极高的吞吐量和低延迟，非常适合大规模数据处理和分析。</li>
<li><strong>可扩展性</strong>：MinIO 支持水平扩展，可以轻松地通过添加更多的节点来扩展存储容量和性能。</li>
<li><strong>兼容性</strong>：MinIO 完全兼容 Amazon S3 API，这使得它可以无缝集成到现有的基于 S3 的应用程序和服务中。</li>
<li><strong>安全性</strong>：MinIO 提供多种安全功能，包括身份验证、访问控制列表 (ACLs) 和加密选项，确保数据的安全性。</li>
<li><strong>开源</strong>：MinIO 是一个完全开源的项目，遵循 Apache License 2.0 许可证，这使得它非常透明且社区活跃。</li>
</ul>
<h2 id="MinIO-可以做什么"><a href="#MinIO-可以做什么" class="headerlink" title="MinIO 可以做什么"></a>MinIO 可以做什么</h2><ol>
<li><strong>云存储</strong>：作为私有云或公有云中的对象存储服务。</li>
<li><strong>备份和归档</strong>：用于长期存储和备份数据。</li>
<li><strong>数据湖</strong>：支持大数据分析和机器学习应用，可以作为数据湖的基础存储层。</li>
<li><strong>容器镜像仓库</strong>：可以作为 Docker 或其他容器镜像的存储库。</li>
<li><strong>文件同步和共享</strong>：类似于 Dropbox 或 Google Drive 的文件同步和共享服务。</li>
<li><strong>媒体流传输</strong>：支持视频、音频等多媒体文件的流式传输。</li>
<li><strong>静态网站托管</strong>：可以用来托管静态网站，如 HTML、CSS 和 JavaScript 文件。</li>
</ol>
<h2 id="默认访问地址"><a href="#默认访问地址" class="headerlink" title="默认访问地址"></a>默认访问地址</h2><p>MinIO 的默认访问地址通常是：</p>
<ul>
<li><strong>HTTP</strong>: <code>http://localhost:9000/minio/</code></li>
<li><strong>HTTPS</strong>: <code>https://localhost:9000/minio/</code></li>
</ul>
<p>这里的 <code>localhost</code> 表示运行 MinIO 服务器的本地主机，而端口号 <code>9000</code> 是 MinIO 默认监听的端口。如果您是在本地环境中运行 MinIO，那么通常可以直接使用 <code>localhost</code>；如果是远程服务器，则需要使用服务器的实际 IP 地址或域名。</p>
<p>默认的登录用户名和密码均为 <code>minioadmin</code>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MinIO 是一个强大且灵活的对象存储解决方案，适合各种规模的企业和个人使用。无论是构建大规模的数据处理系统还是简单的文件共享服务，MinIO 都能提供可靠的支持，说白了就是对象存储。</p>
]]></content>
      <categories>
        <category>数据</category>
      </categories>
      <tags>
        <tag>云存储</tag>
        <tag>minio</tag>
      </tags>
  </entry>
  <entry>
    <title>Knife4j是什么？可以干什么？</title>
    <url>/2024/08/20/Knife4j%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E5%8F%AF%E4%BB%A5%E5%B9%B2%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="1-Knife4j-的定义"><a href="#1-Knife4j-的定义" class="headerlink" title="1. Knife4j 的定义"></a>1. Knife4j 的定义</h2><p>Knife4j 是为 Java MVC 框架集成 Swagger 生成 API 文档的增强解决方案。它的前身是 <code>swagger-bootstrap-ui</code>，取名为 Knife4j 是希望它能像一把匕首一样小巧、轻量，并且功能强悍。其底层是对 Springfox 的封装，使用方式也和 Springfox 一致，只是它对接口文档 UI 进行了优化。</p>
<h2 id="2-核心功能"><a href="#2-核心功能" class="headerlink" title="2. 核心功能"></a>2. 核心功能</h2><h3 id="2-1-文档说明"><a href="#2-1-文档说明" class="headerlink" title="2.1 文档说明"></a>2.1 文档说明</h3><p>Knife4j 根据 Swagger 的规范说明，详细列出了接口文档的说明，包括：</p>
<ul>
<li>接口地址</li>
<li>类型</li>
<li>请求示例</li>
<li>请求参数</li>
<li>响应示例</li>
<li>响应参数</li>
<li>响应码等信息</li>
</ul>
<p>这些信息使得对接口的使用情况一目了然。</p>
<h3 id="2-2-自动生成接口文档"><a href="#2-2-自动生成接口文档" class="headerlink" title="2.2 自动生成接口文档"></a>2.2 自动生成接口文档</h3><p>Knife4j 能够根据代码中的 Swagger 注解自动生成接口文档，包括接口信息、请求参数、响应参数等，极大地减少了编写接口文档的工作量。</p>
<h2 id="3-Knife4j-的优点"><a href="#3-Knife4j-的优点" class="headerlink" title="3. Knife4j 的优点"></a>3. Knife4j 的优点</h2><ul>
<li><strong>功能强大</strong>：Knife4j 功能丰富，提供了丰富的文档展示功能。</li>
<li><strong>易于操作</strong>：使用简单，易于上手。</li>
<li><strong>美观的 UI 界面</strong>：Knife4j 的 UI 设计美观，使用体验良好。</li>
<li><strong>高度定制化</strong>：可以根据项目需求进行高度定制。</li>
</ul>
<h2 id="4-快速上手"><a href="#4-快速上手" class="headerlink" title="4. 快速上手"></a>4. 快速上手</h2><h3 id="4-1-添加依赖"><a href="#4-1-添加依赖" class="headerlink" title="4.1 添加依赖"></a>4.1 添加依赖</h3><p>要在项目中使用 Knife4j，首先需要在项目的 <code>pom.xml</code> 文件中添加相应的依赖。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-2-配置"><a href="#4-2-配置" class="headerlink" title="4.2 配置"></a>4.2 配置</h3><p>接下来，需要对 Knife4j 进行一些基本的配置，以便生成文档。<br>创建<code>com.later.helloknife4j.config.Knife4jConfiguration</code>，内容如下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">openAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                        .title(<span class="string">&quot;hello-knife4j项目API&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;hello-knife4j项目的接口文档&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">userAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder().group(<span class="string">&quot;用户信息管理&quot;</span>).</span><br><span class="line">                pathsToMatch(<span class="string">&quot;/user/**&quot;</span>).</span><br><span class="line">                build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">systemAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder().group(<span class="string">&quot;产品信息管理&quot;</span>).</span><br><span class="line">                pathsToMatch(<span class="string">&quot;/product/**&quot;</span>).</span><br><span class="line">                build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-3-启动项目"><a href="#4-3-启动项目" class="headerlink" title="4.3 启动项目"></a>4.3 启动项目</h3><p>启动SpringBoot项目，访问<a class="link"   href="http://localhost:8080/doc.html%EF%BC%8C%E8%A7%82%E5%AF%9F%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E3%80%82" >http://localhost:8080/doc.html，观察接口文档。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="4-4-基本使用"><a href="#4-4-基本使用" class="headerlink" title="4.4 基本使用"></a>4.4 基本使用</h3><p>Knife4j的使用也十分简单，我们只需使用几个简单注解，对接口进行描述，Knife4j就能自动生成API文档了。具体操作如下</p>
<ol>
<li><strong>描述实体类</strong></li>
</ol>
<ul>
<li>创建<code>com.later.helloknife4j.entity.User</code>，内容如下</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;用户信息实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;编号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户年龄&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>@Schema</code>注解用于描述作为接口参数或者返回值的实体类的数据结构。</p>
<ol start="2">
<li><strong>描述Controller接口</strong></li>
</ol>
<ul>
<li>创建<code>com.later.helloknife4j.controller.HelloController</code>，内容如下</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;用户信息管理&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;根据id获取用户信息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;getById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Parameter(description = &quot;用户id&quot;)</span> <span class="meta">@RequestParam</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">11</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;zhangsan@email.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>@Tag</code>注解用于对接口进行分类，相同<code>Tag</code>的接口会放在同一个菜单。</p>
<p><code>@Operation</code>用于对接口进行描述。</p>
<p><code>@Parameter</code>用于对HTTP请求参数进行描述</p>
<h2 id="5-Knife4j-的应用场景"><a href="#5-Knife4j-的应用场景" class="headerlink" title="5. Knife4j 的应用场景"></a>5. Knife4j 的应用场景</h2><ul>
<li><strong>API 文档生成</strong>：为 RESTful API 生成详细的文档，方便前后端开发人员协作。</li>
<li><strong>API 测试</strong>：基于生成的文档进行 API 的测试。</li>
<li><strong>API 分享</strong>：将生成的文档分享给其他团队成员或外部合作伙伴。</li>
</ul>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>Knife4j 是一个强大的 API 文档生成工具，它简化了 API 文档的创建过程，并提供了美观易用的文档查看界面。对于使用 Java MVC 框架开发 RESTful API 的团队来说，Knife4j 是一个非常有价值的工具。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Knife4j</tag>
      </tags>
  </entry>
  <entry>
    <title>数据脱敏是什么？</title>
    <url>/2024/08/20/%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<p>数据脱敏是一种对敏感信息进行变形处理的过程，目的是为了保护个人隐私或商业机密。这种变形通常是在非生产环境中进行的，比如在开发、测试、分析或其他不需要完整原始数据的场景下使用。通过数据脱敏，可以在确保数据隐私的同时，仍然能够使用这些数据来完成必要的工作。</p>
<p>数据脱敏的方法包括但不限于：</p>
<ol>
<li><p><strong>基于规则的脱敏</strong>：使用固定的规则替换敏感数据中的部分字符，例如使用星号（*）或其他字符替换电话号码的一部分。</p>
</li>
<li><p><strong>随机脱敏</strong>：随机替换敏感数据中的部分字符，例如使用随机数字或字母替换电话号码的一部分。</p>
</li>
<li><p><strong>加密脱敏</strong>：使用加密算法对敏感数据进行加密，只有拥有解密密钥的授权用户才能访问原始数据。</p>
</li>
<li><p><strong>伪装脱敏</strong>：将敏感数据替换为看似合理但实际上不指向任何真实信息的值。</p>
</li>
<li><p><strong>数据扰动脱敏</strong>：对数值型数据添加随机噪声，以改变其精确值，同时保持数据的大致分布特性。</p>
</li>
</ol>
<p>通过这些方法，数据脱敏可以帮助组织遵守数据保护法规，并减少因数据泄露带来的风险。</p>
<p>下面是一个简单的数据脱敏的例子，假设我们有一个包含用户个人信息的数据集：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line"><span class="attr">id:</span> <span class="number">123456789012345678</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">zhangsan@example.com</span></span><br><span class="line"><span class="attr">phone:</span> <span class="number">13800138000</span></span><br></pre></td></tr></table></figure></div>
<p>在这个例子中，<code>id</code>是身份证号码，<code>email</code>和 <code>phone</code>是用户的联系方式，这些都是敏感信息。</p>
<h2 id="数据脱敏后的结果："><a href="#数据脱敏后的结果：" class="headerlink" title="数据脱敏后的结果："></a>数据脱敏后的结果：</h2><h3 id="方法-1-部分隐藏"><a href="#方法-1-部分隐藏" class="headerlink" title="方法 1: 部分隐藏"></a>方法 1: 部分隐藏</h3><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line"><span class="attr">id:</span> <span class="number">1234</span><span class="string">********5678</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">zhangsan******e.com</span></span><br><span class="line"><span class="attr">phone:</span> <span class="number">138</span><span class="string">****1380</span></span><br></pre></td></tr></table></figure></div>
<p>ID: 身份证号码的中间部分被星号替换了。<br>Email: 邮箱地址的中间部分被星号替换了。<br>Phone: 手机号码的中间部分被星号替换了。</p>
<h3 id="方法-2-替换为假数据"><a href="#方法-2-替换为假数据" class="headerlink" title="方法 2: 替换为假数据"></a>方法 2: 替换为假数据</h3><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line"><span class="attr">id:</span> <span class="number">111111111111111111</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">fake@example.com</span></span><br><span class="line"><span class="attr">phone:</span> <span class="number">13900000000</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>ID: 使用了一个完全不同的身份证号码。  </li>
<li>Email: 使用了一个完全不同的邮箱地址。  </li>
<li>Phone: 使用了一个完全不同的手机号码。</li>
</ul>
<p>这两种方法都可以有效地保护用户的隐私，同时保留了数据的基本结构和格式，便于后续的数据处理和分析。</p>
<p>当您对数据进行了脱敏处理后，如果后期需要恢复原始数据用于特定用途，有几种方法可以实现这一目标：</p>
<ol>
<li><p><strong>记录映射关系</strong></p>
<ul>
<li>在进行数据脱敏时，可以记录一个映射表，存储原始数据与脱敏后数据之间的对应关系。这样，在需要时可以通过映射表恢复原始数据。</li>
</ul>
</li>
<li><p><strong>使用可逆加密</strong></p>
<ul>
<li>如果使用加密方法进行数据脱敏，可以选择使用可逆加密算法（如AES）。在这种情况下，只需要保存好加密密钥，就可以在需要时解密数据，恢复原始信息。</li>
</ul>
</li>
<li><p><strong>环境隔离</strong></p>
<ul>
<li>对于非常敏感的数据，可以将其完全隔离在生产环境中，只在生产环境中使用原始数据。在开发、测试等非生产环境中则使用脱敏后的数据。这种方式虽然不能直接恢复数据，但可以确保敏感数据的安全。</li>
</ul>
</li>
</ol>
<h3 id="示例：记录映射关系"><a href="#示例：记录映射关系" class="headerlink" title="示例：记录映射关系"></a>示例：记录映射关系</h3><p>假设我们使用部分隐藏的方式对数据进行了脱敏处理，并记录了映射关系。</p>
<h4 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h4><pre><code class="yaml">- name: 张三
  id: 123456789012345678
  email: zhangsan@example.com
  phone: 13800138000
</code></pre>
]]></content>
      <categories>
        <category>数据</category>
      </categories>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatisplus和mybatisX</title>
    <url>/2024/08/20/mybatisplus%E5%92%8CmybatisX/</url>
    <content><![CDATA[<p>MyBatis Plus 和 MyBatisX 是与 MyBatis 相关的两个工具或扩展，但它们的用途和功能各不相同。以下是对它们的详细介绍：</p>
<h3 id="1-MyBatis-Plus"><a href="#1-MyBatis-Plus" class="headerlink" title="1. MyBatis Plus"></a>1. MyBatis Plus</h3><p><strong>MyBatis Plus (MP)</strong> 是 MyBatis 的增强版，它在 MyBatis 的基础上进行了扩展，提供了更多开箱即用的功能，从而减少了开发人员的工作量。它的主要目标是提高开发效率，同时保持 MyBatis 的灵活性和可扩展性。</p>
<h4 id="主要特性："><a href="#主要特性：" class="headerlink" title="主要特性："></a>主要特性：</h4><ul>
<li><strong>无代码生成器</strong>：提供了丰富的 CRUD（Create, Read, Update, Delete）接口，几乎可以做到零代码 CRUD 操作。</li>
<li><strong>全局配置</strong>：支持全局配置，便于统一管理 MyBatis 的相关设置。</li>
<li><strong>插件支持</strong>：内置分页插件、性能分析插件、乐观锁插件、SQL 执行分析插件等，提供了增强的功能。</li>
<li><strong>代码生成器</strong>：提供代码生成器，能够根据数据库表快速生成实体类、Mapper 接口、Service、Controller 等代码。</li>
<li><strong>条件构造器</strong>：提供链式调用的条件构造器，简化 SQL 语句的书写。</li>
</ul>
<h4 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h4><ul>
<li>快速开发项目中大量的增删改查操作。</li>
<li>需要较多动态 SQL 的项目，MyBatis Plus 提供了非常灵活的条件构造器。</li>
<li>需要分页查询、数据审计（如创建时间、更新时间记录）等常见功能的场景。</li>
</ul>
<h4 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：使用 MyBatis Plus 进行简单的查询操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-MyBatisX"><a href="#2-MyBatisX" class="headerlink" title="2. MyBatisX"></a>2. MyBatisX</h3><p><strong>MyBatisX</strong> 是一款专门为 MyBatis 和 MyBatis Plus 提供支持的 IntelliJ IDEA 插件。它旨在提高开发人员在使用 MyBatis 及其增强框架时的开发效率。该插件通过集成各种智能提示和自动化功能，帮助开发人员更快、更高效地完成开发任务。</p>
<h4 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h4><ul>
<li><strong>Mapper XML 文件的代码提示</strong>：提供 Mapper XML 文件中标签、属性、SQL 语句等的智能提示和补全。</li>
<li><strong>SQL 语句预览</strong>：在编写 XML 中的 SQL 语句时，可以实时预览最终的 SQL 语句。</li>
<li><strong>动态 SQL 支持</strong>：提供对 MyBatis 中动态 SQL 的智能分析和提示功能。</li>
<li><strong>双向跳转</strong>：在 Mapper 接口方法和对应的 XML 映射文件中的 SQL 语句之间支持快速跳转。</li>
<li><strong>代码生成</strong>：支持从数据库表生成 MyBatis 的基础代码（如实体类、Mapper、Service 等）。</li>
</ul>
<h4 id="使用场景：-1"><a href="#使用场景：-1" class="headerlink" title="使用场景："></a>使用场景：</h4><ul>
<li>使用 IntelliJ IDEA 进行 MyBatis 或 MyBatis Plus 项目开发时，需要增强 IDE 对这些框架的支持。</li>
<li>需要频繁编写 Mapper XML 文件的项目，MyBatisX 可以大幅提高开发效率。</li>
</ul>
<h4 id="功能描述："><a href="#功能描述：" class="headerlink" title="功能描述："></a>功能描述：</h4><ul>
<li>当你在 IDEA 中打开一个 Mapper 接口时，MyBatisX 会为你提供接口方法和 XML 文件中 SQL 语句之间的跳转功能。</li>
<li>当你在 XML 文件中编写 SQL 语句时，插件会自动补全标签名、属性名等，极大地减少了手动输入的工作量。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><strong>MyBatis Plus</strong> 是 MyBatis 的一个增强工具，提供了大量的开箱即用功能，适合快速开发和减少重复代码。</li>
<li><strong>MyBatisX</strong> 是一款 IDEA 插件，主要用来提升开发 MyBatis 和 MyBatis Plus 项目时的效率，通过智能提示、自动补全、代码生成等功能，帮助开发人员更快地完成开发任务。</li>
</ul>
<p>两者可以结合使用：MyBatis Plus 用于简化业务逻辑开发，MyBatisX 用于提高开发效率。</p>
<h3 id="MyBatisX怎么生成基本代码？"><a href="#MyBatisX怎么生成基本代码？" class="headerlink" title="MyBatisX怎么生成基本代码？"></a>MyBatisX怎么生成基本代码？</h3><p>使用MyBatisX插件生成代码之前需要集成mybatis-plus框架，并且需要下载mybatisX插件。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>完整pom.xml文件</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">		 <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-mp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-mp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>hello-mp<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h4><ul>
<li>idea连接上数据库<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240827171305671.png"
                      alt="image-20240827171305671"
                ><br>输入数据库信息，连接数据库<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240827171423151.png"
                      alt="image-20240827171423151"
                ></li>
</ul>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h4><ul>
<li>连接成功之后选择数据库点击右键，选择MyBatisX-&gt;Generate Mapper<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240827171626934.png"
                      alt="image-20240827171626934"
                ></li>
</ul>
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h4><ul>
<li>操作如下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240827171900868.png"
                      alt="image-20240827171900868"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240827172053402.png"
                      alt="image-20240827172053402"
                ></li>
</ul>
]]></content>
      <categories>
        <category>数据</category>
      </categories>
      <tags>
        <tag>mybatisplus</tag>
      </tags>
  </entry>
  <entry>
    <title>excel导入导出工具</title>
    <url>/2024/08/20/excel%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>EasyExcel 是阿里巴巴开源的一款基于 Java 的高效处理 Excel 文件的工具库。相比于传统的 Apache POI 等 Excel 处理库，EasyExcel 更加轻量和高效，尤其是在处理大文件时表现得更加出色。</p>
<h3 id="EasyExcel-的主要特点："><a href="#EasyExcel-的主要特点：" class="headerlink" title="EasyExcel 的主要特点："></a>EasyExcel 的主要特点：</h3><ol>
<li><p><strong>高性能</strong>：</p>
<ul>
<li>EasyExcel 通过减少内存占用，能够高效地处理大数据量的 Excel 文件，尤其适合导入和导出大文件。</li>
<li>读取时使用了 <code>SAX</code> 模式，避免了将整个文件加载到内存中的问题。</li>
</ul>
</li>
<li><p><strong>简洁易用</strong>：</p>
<ul>
<li>EasyExcel 提供了简单易用的 API，可以快速上手并完成常见的 Excel 操作，如读取、写入、导出等。</li>
<li>代码量少，使用方便。</li>
</ul>
</li>
<li><p><strong>支持 Excel 2007 及以上版本</strong>：</p>
<ul>
<li>EasyExcel 支持 <code>.xlsx</code> 文件格式，但不支持 <code>.xls</code> 格式（Excel 2003 及以前版本的文件格式）。</li>
</ul>
</li>
<li><p><strong>注解支持</strong>：</p>
<ul>
<li>EasyExcel 允许通过注解直接在 Java 类中配置 Excel 的导入导出规则，如列名映射等，非常方便。</li>
</ul>
</li>
<li><p><strong>支持自定义转换</strong>：</p>
<ul>
<li>用户可以自定义数据的读写转换逻辑，处理复杂的数据类型和格式。</li>
</ul>
</li>
</ol>
<h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ul>
<li><strong>大规模数据导入导出</strong>：适用于需要处理百万级别以上行数据的场景，如财务报表、用户数据导入导出等。</li>
<li><strong>实时生成 Excel 文件</strong>：适用于需要在服务端实时生成 Excel 文件并提供下载的场景，如后台管理系统的报表导出等。</li>
</ul>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>下面是一个简单的导出 Excel 的示例：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.excel.EasyExcel;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelExportExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建数据列表</span></span><br><span class="line">        List&lt;DemoData&gt; data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        data.add(<span class="keyword">new</span> <span class="title class_">DemoData</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>));</span><br><span class="line">        data.add(<span class="keyword">new</span> <span class="title class_">DemoData</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 导出 Excel 文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;test.xlsx&quot;</span>;</span><br><span class="line">        EasyExcel.write(fileName, DemoData.class).sheet(<span class="string">&quot;Sheet1&quot;</span>).doWrite(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoData</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DemoData</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个例子中，<code>DemoData</code> 类定义了 Excel 文件中每一行的数据结构，而 <code>EasyExcel.write</code> 方法用于将数据写入到 Excel 文件中。</p>
<h3 id="项目集成"><a href="#项目集成" class="headerlink" title="项目集成"></a>项目集成</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  excel处理工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>EasyExcel 是一个非常适合 Java 开发者使用的 Excel 操作库，特别是在需要处理大规模数据的情况下，它的性能优势尤为明显。如果你在项目中有 Excel 处理的需求，可以考虑使用 EasyExcel 来简化开发工作。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>导入导出</tag>
      </tags>
  </entry>
  <entry>
    <title>Knife4j接口文档Dome</title>
    <url>/2024/08/27/Knife4jDome/</url>
    <content><![CDATA[<p>注意：学习本项目之前要会mybatis-plus和Knife4j的基本操作</p>
<h2 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h2><p>首先在数据库中准备一张表，为后序的学习做准备。</p>
<ol>
<li><p><strong>创建数据库</strong></p>
<p>在MySQL中创建一个数据库<code>hello_mp</code></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE hello_mp <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>创建表</strong></p>
<p>在<code>hello-mp</code>库中创建一个表<code>user</code></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">use hello_mp</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>插入数据</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">INSERT INTO user (<span class="built_in">id</span>, name, age, email) VALUES</span><br><span class="line">(1, <span class="string">&#x27;Jone&#x27;</span>, 18, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(2, <span class="string">&#x27;Jack&#x27;</span>, 20, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(3, <span class="string">&#x27;Tom&#x27;</span>, 28, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(4, <span class="string">&#x27;Sandy&#x27;</span>, 21, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(5, <span class="string">&#x27;Billie&#x27;</span>, 24, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>项目下载：<a class="link"   href="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/project/hello-mp.zip" >点我下载dome <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Knife4j</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务Day01</title>
    <url>/2024/08/30/MicroservicesDay01/</url>
    <content><![CDATA[<h2 id="传统单体架构"><a href="#传统单体架构" class="headerlink" title="传统单体架构"></a>传统单体架构</h2><ul>
<li>将业务的所有功能集成到一个项目里面，打成一个包部署。</li>
</ul>
<h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><ul>
<li><p>根据业务功能对系统进行拆分，每个业务模块作为独立的项目开发，称为一个服务。</p>
</li>
<li><p>微服务是一种经过良好架构设计的分布式架构方案，微服务架构特征:</p>
</li>
<li><p>单一职责:微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发</p>
</li>
<li><p>面向服务:微服务对外暴露业务接口</p>
</li>
<li><p>自治:团队独立、技术独立、数据独立、部署独立</p>
</li>
<li><p>以为我目前的理解就是，一个服务一个数据库，当一个服务需要另一个服务的数据的时候，是去请求另一个服务暴露的接口获取数据，而不是像以前的单体架构一样直接用。也许这就是服务者和消费者吧。</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240830003545210.png"
                      alt="image-20240830003545210"
                ></p>
</li>
<li><p>服务提供者：一次业务中，被其它微服务调用的服务。(提供接口给其它微服务）</p>
</li>
<li><p>服务消费者：一次业务中，调用其它微服务的服务。(调用其它微服务提供的接口)</p>
</li>
</ul>
<h2 id="两个启动类，两个服务"><a href="#两个启动类，两个服务" class="headerlink" title="两个启动类，两个服务:"></a>两个启动类，两个服务:</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/417ea4812edca94c98a4238cb91bf2a.png"
                     
                ></li>
</ul>
<h2 id="服务A调用服务B，服务B调用服务C，那么服务B是什么角色"><a href="#服务A调用服务B，服务B调用服务C，那么服务B是什么角色" class="headerlink" title="服务A调用服务B，服务B调用服务C，那么服务B是什么角色?"></a>服务A调用服务B，服务B调用服务C，那么服务B是什么角色?</h2><p>一个服务既可以是消费者，可以是提供者，也可以是两者。</p>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>微服务日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2023版IDEA复制配置修改端口增加一个当前运行服务的实操方法</title>
    <url>/2024/08/31/Port-configuration-modification/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行微服务的学习当中，在enreka注册配置的时候，想要去模拟集群部署，就需要去复制配置，本文讲解一下如何复制，以及修改端口号。</p>
<h2 id="流程截图"><a href="#流程截图" class="headerlink" title="流程截图"></a>流程截图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240831103119037.png"
                      alt="image-20240831103119037"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240831103206597.png"
                      alt="image-20240831103206597"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240831104255071.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240831103255397.png"
                      alt="image-20240831103255397"
                ></p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>端口修改</tag>
      </tags>
  </entry>
  <entry>
    <title>负载均衡策略</title>
    <url>/2024/08/31/Load-balancing-strategy/</url>
    <content><![CDATA[<h2 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h2><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://laterblog-1306487993.cos.ap-guangzhou.myqcloud.com/img/image-20240831112930026.png"
                     
                ></p>
<p>不同规则的含义如下：</p>
<table>
<thead>
<tr>
<th><strong>内置负载均衡规则类</strong></th>
<th><strong>规则描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>RoundRobinRule</td>
<td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td>
</tr>
<tr>
<td><strong>ZoneAvoidanceRule</strong></td>
<td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td>
</tr>
<tr>
<td>BestAvailableRule</td>
<td>忽略那些短路的服务器，并选择并发数较低的服务器。</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机选择一个可用的服务器。</td>
</tr>
<tr>
<td>RetryRule</td>
<td>重试机制的选择逻辑</td>
</tr>
<tr>
<td>PredicateBasedRule</td>
<td>基于Predicate的过滤规则</td>
</tr>
<tr>
<td>ZoneAvoidanceRule</td>
<td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td>
</tr>
</tbody></table>
<p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p>
<h2 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h2><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p>
<ol>
<li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();<span class="comment">// 随机负载均衡</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li>
</ol>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userservice:</span> <span class="comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p>
</blockquote>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>负载均衡</tag>
      </tags>
  </entry>
</search>
